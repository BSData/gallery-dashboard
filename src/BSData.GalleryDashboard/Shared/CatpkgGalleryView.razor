@inject GalleryHttpClient client
@inject GalleryBrowserState state

@if (CatpkgGallery is { InfoCache: { } galleryInfo })
{
    <FluentCard class="p-2">
        <div>
            <b>@galleryInfo.Name</b>
            <br />
            <em>@galleryInfo.Description</em>
        </div>
        <FluentSearch Placeholder="Find repository" @bind-Value=SearchText @oninput="OnSearchInput"></FluentSearch>
        <FluentCheckbox @bind-Value=ShowArchived>
            Show Archived Repositories
        </FluentCheckbox>
        <details>
            <summary>Links:</summary>
            <ul>
                <li>
                    Website URL: <a href="@galleryInfo.WebsiteUrl">@galleryInfo.WebsiteUrl</a>
                </li>
                <li>
                    GitHub: <a href="@galleryInfo.GithubUrl">@galleryInfo.GithubUrl</a>
                </li>
                <li>
                    Catpkg-Gallery JSON: <a href="@galleryInfo.RepositorySourceUrl">@galleryInfo.RepositorySourceUrl</a>
                </li>
                <li>
                    Discord: <a href="@galleryInfo.DiscordUrl">@galleryInfo.DiscordUrl</a>
                </li>
                <li>
                    Facebook: <a href="@galleryInfo.FacebookUrl">@galleryInfo.FacebookUrl</a>
                </li>
                <li>
                    Twitter: <a href="@galleryInfo.TwitterUrl">@galleryInfo.TwitterUrl</a>
                </li>
                <li>
                    Atom feed: <a href="@galleryInfo.FeedUrl">@galleryInfo.FeedUrl</a>
                </li>
            </ul>
        </details>
    </FluentCard>

    var repoList = repositories;

    <div class="flex flex-col space-y-2">
        <b>Repositories (@repositories.Count):</b>
        @foreach (var catpkg in repositories)
        {
            <FluentCard class="p-2">
                <div>
                    <b>@catpkg.Description</b>
                    @if (catpkg.Archived is true)
                    {
                        <span class="ml-1">
                            <FluentBadge Appearance="Appearance.Neutral">Archived</FluentBadge>
                        </span>
                    }
                    <br>

                    <FluentAnchor Href="@catpkg.GithubUrl" Appearance=Appearance.Hypertext class="font-mono">
                        @catpkg.Name
                    </FluentAnchor>
                </div>
                <div>
                    <span class="font-mono">@catpkg.Version</span>
                    <b>@catpkg.LastUpdateDescription</b>
                    @if (catpkg.LastUpdated is { } lastUpdated)
                    {
                        var offset = DateTimeOffset.Parse(lastUpdated);
                        <br>
                        <em>
                            <small>
                                <time datetime="@lastUpdated">
                                    @offset.Humanize()
                                    (@offset.ToLocalTime().ToString("u"))
                                </time>
                            </small>
                        </em>
                    }
                </div>
                <FluentButton @onclick="() => SelectCatpkg(catpkg)">Details</FluentButton>
            </FluentCard>
        }
    </div>
}
else if (CatpkgGallery is null)
{
    <span>No gallery selected.</span>
}
else
{
    <FluentProgressRing />
    <p>Loading catpkg gallery...</p>
}

@code {
    [Parameter]
    public CatpkgGalleryCache? CatpkgGallery { get; set; }

    [Parameter]
    public EventCallback<CatpkgGalleryCache> CatpkgGalleryChanged { get; set; }

    [Parameter]
    public EventCallback<CatpkgRepositoryInfo> RepositorySelected { get; set; }

    readonly Timer searchTimer;
    string? searchText;
    string? SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            UpdateRepositories();
        }
    }

    bool showArchived;
    bool ShowArchived
    {
        get => showArchived;
        set
        {
            showArchived = value;
            UpdateRepositories();
        }
    }
    List<CatpkgRepositoryInfo> repositories = new();
    List<ColumnDefinition<CatpkgRepositoryInfo>> ColumnDefinitions { get; } = new()
    {
#nullable disable
        new("Name", x => x.Description),
        new("Latest Release", x => x.Version),
#nullable restore
    };

    void UpdateRepositories()
    {
        repositories = CatpkgGallery?.InfoCache?.Repositories
        ?.Where(x => x.Archived is true ? ShowArchived : true)
        .Where(Matches)
        .OrderBy(x => x.Description)
        .ToList()
        ?? new();
        StateHasChanged();

        bool Matches(CatpkgRepositoryInfo x)
        {
            var search = SearchText;
            return string.IsNullOrWhiteSpace(search) ? true
            : MatchSearch(search, x.Name) || MatchSearch(search, x.Description);
        }

        static bool MatchSearch(string search, string? value) =>
        value?.Contains(search, StringComparison.OrdinalIgnoreCase) ?? false;
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString();
        searchText = newValue;
        searchTimer.Change(TimeSpan.FromMilliseconds(300), Timeout.InfiniteTimeSpan);
    }

    async Task SelectCatpkg(CatpkgRepositoryInfo repoInfo)
    {
        await RepositorySelected.InvokeAsync(repoInfo);
    }

    public CatpkgGalleryView()
    {
        searchTimer = new Timer(state => ((CatpkgGalleryView?)state)!.UpdateRepositories(), this, Timeout.Infinite,
        Timeout.Infinite);
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (CatpkgGallery is { Reference: { } galleryRef, InfoCache: null })
        {
            var result = await state.Cache.GetHydratedCatpkgGalleryCacheAsync(client, galleryRef);
            await CatpkgGalleryChanged.InvokeAsync(result);
        }
        UpdateRepositories();
    }
}
