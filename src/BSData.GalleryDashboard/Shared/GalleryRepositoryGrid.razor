@inject GalleryHttpClient client
@inject GalleryBrowserState state

@if (CatpkgGallery is { InfoCache: { Repositories.Count: > 0 } galleryInfo } galleryCache)
{
    <FluentCard class="p-2">
        <h4>@galleryInfo.Name</h4>
        <em>@galleryInfo.Description</em>
        <ul>
            <li>
                Website URL: <a href="@galleryInfo.WebsiteUrl">@galleryInfo.WebsiteUrl</a>
            </li>
            <li>
                GitHub: <a href="@galleryInfo.GithubUrl">@galleryInfo.GithubUrl</a>
            </li>
            <li>
                Catpkg-Gallery JSON: <a href="@galleryInfo.RepositorySourceUrl">@galleryInfo.RepositorySourceUrl</a>
            </li>
            <li>
                Discord: <a href="@galleryInfo.DiscordUrl">@galleryInfo.DiscordUrl</a>
            </li>
            <li>
                Facebook: <a href="@galleryInfo.FacebookUrl">@galleryInfo.FacebookUrl</a>
            </li>
            <li>
                Twitter: <a href="@galleryInfo.TwitterUrl">@galleryInfo.TwitterUrl</a>
            </li>
            <li>
                Atom feed: <a href="@galleryInfo.FeedUrl">@galleryInfo.FeedUrl</a>
            </li>
        </ul>
    </FluentCard>

    var repoList = galleryInfo.Repositories.ToList();

    <FluentDataGrid RowsData=repoList TItem=CatpkgRepositoryInfo GenerateHeader=GenerateHeaderOption.Default
    ColumnDefinitions=ColumnDefinitions GridTemplateColumns="1fr 2fr">
        <RowItemTemplate>
            <FluentDataGridRow>
                <FluentDataGridCell GridColumn=1>
                    <p>
                        <b>@context.Description</b>
                    </p>
                    <p>
                        <code>@context.Name</code>
                    </p>
                </FluentDataGridCell>
                <FluentDataGridCell GridColumn=2>
                    <p>
                        <b>@context.LastUpdateDescription</b>
                    </p>
                    <p>
                        <code>@context.Version</code> @@
                        @if (context.LastUpdated is { } lastUpdated)
                            {
                                <time datetime="@lastUpdated">@DateTimeOffset.Parse(lastUpdated).ToLocalTime().ToString("F")</time>
                            }
                        </p>
                    </FluentDataGridCell>
                </FluentDataGridRow>
            </RowItemTemplate>
        </FluentDataGrid>
}
else if (CatpkgGallery is null)
{
    <span>No gallery selected.</span>
}
else
{
    <FluentProgressRing />
    <p>Loading catpkg gallery...</p>
}

@code {
    [Parameter]
    public CatpkgGalleryCache? CatpkgGallery { get; set; }

    [Parameter]
    public EventCallback<CatpkgGalleryCache> CatpkgGalleryChanged { get; set; }

    List<ColumnDefinition<CatpkgRepositoryInfo>> ColumnDefinitions { get; } = new()
    {
#nullable disable
        new("Name", x => x.Description),
        new("Latest Release", x => x.Version),
#nullable restore
    };

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (CatpkgGallery is { Reference: { } galleryRef, InfoCache: null })
        {
            var result = await state.Cache.GetHydratedCatpkgGalleryCacheAsync(client, galleryRef);
            await CatpkgGalleryChanged.InvokeAsync(result);
        }
    }
}
